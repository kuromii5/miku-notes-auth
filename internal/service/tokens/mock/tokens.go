// Code generated by MockGen. DO NOT EDIT.
// Source: tokens.go

// Package mock_tokens is a generated GoMock package.
package mock_tokens

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockRefreshTokenSetter is a mock of RefreshTokenSetter interface.
type MockRefreshTokenSetter struct {
	ctrl     *gomock.Controller
	recorder *MockRefreshTokenSetterMockRecorder
}

// MockRefreshTokenSetterMockRecorder is the mock recorder for MockRefreshTokenSetter.
type MockRefreshTokenSetterMockRecorder struct {
	mock *MockRefreshTokenSetter
}

// NewMockRefreshTokenSetter creates a new mock instance.
func NewMockRefreshTokenSetter(ctrl *gomock.Controller) *MockRefreshTokenSetter {
	mock := &MockRefreshTokenSetter{ctrl: ctrl}
	mock.recorder = &MockRefreshTokenSetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRefreshTokenSetter) EXPECT() *MockRefreshTokenSetterMockRecorder {
	return m.recorder
}

// Set mocks base method.
func (m *MockRefreshTokenSetter) Set(ctx context.Context, userID int32, fingerprint, token string, expires time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", ctx, userID, fingerprint, token, expires)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockRefreshTokenSetterMockRecorder) Set(ctx, userID, fingerprint, token, expires interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockRefreshTokenSetter)(nil).Set), ctx, userID, fingerprint, token, expires)
}

// MockRefreshTokenDeleter is a mock of RefreshTokenDeleter interface.
type MockRefreshTokenDeleter struct {
	ctrl     *gomock.Controller
	recorder *MockRefreshTokenDeleterMockRecorder
}

// MockRefreshTokenDeleterMockRecorder is the mock recorder for MockRefreshTokenDeleter.
type MockRefreshTokenDeleterMockRecorder struct {
	mock *MockRefreshTokenDeleter
}

// NewMockRefreshTokenDeleter creates a new mock instance.
func NewMockRefreshTokenDeleter(ctrl *gomock.Controller) *MockRefreshTokenDeleter {
	mock := &MockRefreshTokenDeleter{ctrl: ctrl}
	mock.recorder = &MockRefreshTokenDeleterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRefreshTokenDeleter) EXPECT() *MockRefreshTokenDeleterMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockRefreshTokenDeleter) Delete(ctx context.Context, userID int32, fingerprint string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, userID, fingerprint)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockRefreshTokenDeleterMockRecorder) Delete(ctx, userID, fingerprint interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRefreshTokenDeleter)(nil).Delete), ctx, userID, fingerprint)
}

// MockUserGetter is a mock of UserGetter interface.
type MockUserGetter struct {
	ctrl     *gomock.Controller
	recorder *MockUserGetterMockRecorder
}

// MockUserGetterMockRecorder is the mock recorder for MockUserGetter.
type MockUserGetterMockRecorder struct {
	mock *MockUserGetter
}

// NewMockUserGetter creates a new mock instance.
func NewMockUserGetter(ctrl *gomock.Controller) *MockUserGetter {
	mock := &MockUserGetter{ctrl: ctrl}
	mock.recorder = &MockUserGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserGetter) EXPECT() *MockUserGetterMockRecorder {
	return m.recorder
}

// UserID mocks base method.
func (m *MockUserGetter) UserID(ctx context.Context, token, fingerprint string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserID", ctx, token, fingerprint)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserID indicates an expected call of UserID.
func (mr *MockUserGetterMockRecorder) UserID(ctx, token, fingerprint interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserID", reflect.TypeOf((*MockUserGetter)(nil).UserID), ctx, token, fingerprint)
}
